datasource db {
    provider = "mysql"
    url      = "mysql://root:ZJaFfQsGcBua@localhost:3306/chat"
    // url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Message {
    id        String     @id @default(cuid())
    body      String
    from      User       @relation(fields: [fromID], references: [id])
    fromID    String
    chat      Conversion @relation(fields: [chatID], references: [id], onDelete: Cascade)
    chatID    String
    seen      Boolean    @default(false)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String    @unique
    password      String?
    messages      Message[]
    joinAt        DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    emailVerified DateTime?
    image         String?

    friends     Friendship[] @relation(name: "requestedFrom")
    friendsFrom Friendship[] @relation(name: "requestedTo")
    conversions Conversion[]
}

model Friendship {
    requestedFromID String
    requestedFrom   User          @relation(name: "requestedFrom", fields: [requestedFromID], references: [id], onDelete: Cascade)
    requestedTo     User          @relation(name: "requestedTo", fields: [requestedToID], references: [id], onDelete: Cascade)
    requestedToID   String
    status          RequestStatus @default(PENDING)

    @@unique([requestedFromID, requestedToID], name: "id")
}

enum RequestStatus {
    PENDING
    ACCEPTED
    DENIND
}

model Conversion {
    id        String    @id @default(uuid())
    members   User[]
    is_group  Boolean   @default(false)
    profile   String?
    messages  Message[]
    createdAt DateTime  @default(now())
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
